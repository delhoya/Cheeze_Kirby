

===========================================


1. 알고리즘
프로그래머스
리트코드

백준 추천
https://covenant.tistory.com/224
https://www.tutorialspoint.com/valid-mountain-array-in-python

삼성소프트웨어 아데미
https://swexpertacademy.com/main/main.do
https://zetawiki.com/wiki/SW_Expert_%EC%95%84%EC%B9%B4%EB%8D%B0%EB%AF%B8

2. 기계학습
패스트캠퍼스 강의 

3. 토익시험



1. 알고리즘 책 
https://freedeveloper.tistory.com/271?category=888096


===========================================

https://colab.research.google.com/github/NoCodeProgram/CodingTest/blob/main

1
코딩테스트 BackTracking
모든 재생목록 보기

214
지금 재생 중
코딩테스트 Dynamic Programming
모든 재생목록 보기

83
지금 재생 중
코딩테스트 HashMap
모든 재생목록 보기

64
지금 재생 중
코딩테스트 Stack
모든 재생목록 보기

55
지금 재생 중
코딩테스트 String
모든 재생목록 보기

156
지금 재생 중
코딩테스트 Arrays
모든 재생목록 보기

7
코딩테스트 Greedy
모든 재생목록 보기

58
지금 재생 중
코딩테스트 Heap
모든 재생목록 보기

89
지금 재생 중
코딩테스트 Graph
모든 재생목록 보기

1210
지금 재생 중
코딩테스트 Tree
모든 재생목록 보기

511
지금 재생 중
코딩테스트 Queue
모든 재생목록 보기

1312
지금 재생 중
코딩테스트 LinkedList
모든 재생목록 보기

..



===========================================

import os

inDirectory = 'D:/Data/Simulation/dual-detector/Images/'
outDirectory = 'D:/Data/Simulation/dual-detector/outputs/'
# read all files in inDirectory and make filename list 
mylist = os.listdir(inDirectory)

print(len(mylist))

for i in range(len(mylist)):
    print(i, mylist[i])
    input_name = mylist[i]

    output_name = input_name[0:len(input_name) - 3] + 'image.png'
    print('input file: ', input_name)
    print('output file: ', output_name)

    filename = inDirectory + input_name
    output_filename = outDirectory + output_name


===========================================

################################################
#  Code by Mikiko on Oct. 28th 2020
#  for reading binary images
#  with 32-float
#  output: average image
#  in myDirectory
################################################
import os
import struct
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

### constant ###
Npixel_x = 200
Npixel_y = 200
Scintillator = ['CsI','GOS']    #'CsI' or 'GOS'
StartPixels = [40, 90, 140]
for kk in range(3):
    print(StartPixels[kk])

StepPixels = 20

print(Scintillator[0], Scintillator[1])

### variable ###
ii=0
Nfile_CSI = 0
Nfile_GOS = 0

Boundary_x1=[]
Boundary_x2=[]
Boundary_y1=[]
Boundary_y2=[]

output_CsI = []
output_GOS = []


# setting path to input file
inDirectory = 'D:/Data/Simulation/dual-detector/chest_CsI_GOS/'
outDirectory = 'D:/Data/Simulation/dual-detector/outputs_chest_CsI_GOS/'
mylist = os.listdir(inDirectory)
print(len(mylist))

output_name0 =  mylist[0]
output_image1 = outDirectory + output_name0[0:len(output_name0)-16] + 'Projection.png'
output_image2 = outDirectory + output_name0[0:len(output_name0)-16] + 'Inverted.png'
output_csvfile = outDirectory + output_name0[0:len(output_name0)-16] + 'Output_CsI_GOS.csv'


for j in range(2):
    title_image_1 = Scintillator[j] + '-layer Projection '
    title_image_2 = Scintillator[j] + '-layer Norm-Proj. '
    title_image_3 = Scintillator[j] + '-layer Inverted '
    title_image_4 = Scintillator[j] + '-layer Norm-Invert. '

    textFile_1 = Scintillator[j] + '_projection.txt'
    textFile_2 = Scintillator[j] + '_inverted.txt'
    output_text_1 = outDirectory + textFile_1
    output_text_2 = outDirectory + textFile_2

    for i in range(len(mylist)):
        #print(i, mylist[i])
        input_name = mylist[i]
        split_name = input_name.split('_')

        if(split_name[1] == Scintillator[j]):

            filename = inDirectory + input_name
            output_name = input_name[0:len(input_name) - 3] + 'png'
            output_filename = outDirectory + output_name

            ii = ii+1

            with open(filename, 'rb') as file:
                fileContent = file.read()
                Nbins = len(fileContent) // 4
                print(Nbins)
                data = struct.unpack('f' * Nbins, fileContent)
                print('input file: ', input_name)
                print('output file: ', output_name)

                if ii == 1:
                    output_image_sumAll = outDirectory + input_name[0:len(input_name) - 12] + 'sum.png'
                    avrg_data = np.array(data)
                else:
                    avrg_data = avrg_data + np.array(data)

                print(min(avrg_data), max(avrg_data))
                print(len(avrg_data))

    out_data = avrg_data/ii
    avrg_data = avrg_data/ii
    print(min(avrg_data), max(avrg_data))
    print(len(avrg_data))
    Npixel_air = 5*200
    air = sum(avrg_data[(len(avrg_data) - Npixel_air):])/Npixel_air
    norm_avrg_data = avrg_data/air
    invert_avrg_data = - avrg_data + air
    out_invert = invert_avrg_data

    invert_avrg_data = invert_avrg_data.clip(min=1)

    norm_invert_avrg = invert_avrg_data/max(invert_avrg_data)
    print('len:', len(invert_avrg_data), 'max:', max(invert_avrg_data))

    avrg_data = np.reshape(avrg_data, (Npixel_y, Npixel_x))
    norm_avrg_data = np.reshape(norm_avrg_data, (Npixel_y, Npixel_x))
    invert_avrg_data = np.reshape(invert_avrg_data, (Npixel_y, Npixel_x))
    norm_invert_avrg = np.reshape(norm_invert_avrg, (Npixel_y, Npixel_x))

    #print(invert_avrg_data[40:60,10:30])
    #print('sum', sum(sum(invert_avrg_data[40:60,10:30]))/400)

    print('air:',air)
    print('scintillator: ', Scintillator[j],'  # of files: ',ii)

    #### write txt file (sum_data) ####
    with open(output_text_1, 'w') as f:
        for item in out_data:
            print(item)
            f.write("%f\n" % item)

    with open(output_text_2, 'w') as f:
        for item in out_invert:
            print(item)
            f.write("%f\n" % item)


    print(output_image_sumAll)

    plt.subplots(figsize=(18, 4))

    plt.subplot(1, 4, 1)
    plt.title(title_image_1)
    plt.imshow(avrg_data)
    plt.colorbar()
    plt.subplot(1, 4, 2)
    plt.title(title_image_2)
    plt.imshow(norm_avrg_data)
    plt.colorbar()
    plt.subplot(1, 4, 3)
    plt.title(title_image_3)
    plt.imshow(invert_avrg_data)
    plt.colorbar()
    plt.savefig(output_image_sumAll)
    plt.subplot(1, 4, 4)
    plt.title(title_image_4)
    plt.imshow(norm_invert_avrg)
    plt.colorbar()
    plt.savefig(output_image_sumAll)
    plt.show()

    # INITILIZATION
    del avrg_data
    ii = 0

#ratio_invert = invert_GOS/invert_CsI
#ratio_invert = ratio_invert.clip(max=1)
#ratio_diff_invert = (invert_CsI - invert_GOS)/invert_CsI
#ratio_diff_invert = ratio_diff_invert.clip(min=0)
#subtract_norm_invert = norm_invert_CSI - norm_invert_GOS

plt.subplots(figsize=(18, 9))
plt.subplot(1, 2, 1)
plt.title('Proj_CsI')
plt.imshow(proj_CSI)
plt.colorbar()
plt.subplot(1, 2, 2)
plt.title('Proj_GOS')
plt.imshow(proj_GOS)
plt.colorbar()
plt.savefig(output_image1)
plt.show()

plt.subplots(figsize=(18, 9))
plt.subplot(1, 2, 1)
plt.title('invert_CsI')
plt.imshow(invert_CsI)
plt.colorbar()
plt.subplot(1, 2, 2)
plt.title('invert_GOS')
plt.imshow(invert_GOS)
plt.colorbar()
plt.savefig(output_image2)
plt.show()

