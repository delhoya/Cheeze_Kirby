
11주차 9장구간추정1
11주차 9장구간추정2
11주차 9장구간추정3

12주차 통계
12주차
12주차


http://matrix.skku.ac.kr/knou-knowls/

11주차 주성분 분석 1
11주차 주성분 분석 2

12주차
12주차



11주차 온라인 수업-1차시(해시테이블-선형조사&이차조사)
11주차 온라인 수업-2차시(이중해싱&체이닝)
11주차 온라인 수업-3차시(과제설명&선택정렬)

12주차 온라인 수업-1차시(기본정렬&쉘정렬)
12주차 온라인 수업-2차시(쉘&힙&병합)
12주차 온라인 수업-3차시(병합&퀵&기수정렬)



===================================================


음향테스트
https://www.audiocheck.net/

파이선 RT60 값 분석 (librosa)
https://ahnjg.tistory.com/83?category=1135285
https://start-up.house/en/blog/articles/reverberation-time-sound-analysis-python
https://lucaseo.github.io/posts/2021-01-22-hands-on-preprocess-audio-data/
https://m.blog.naver.com/PostView.nhn?blogId=cassiopeia84&logNo=40202107686&proxyReferer=https:%2F%2Fwww.google.com%2F

https://mac.kaist.ac.kr/~juhan/gct634/
https://librosa.org/doc/latest/advanced.html#advanced

음성인식
https://newsight.tistory.com/294
https://seungheondoh.netlify.app/blog/fft

===================================================

from scipy.io import wavfile
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

# 파일 경로 지정 (확장자 주의할것)
sample_rate,data = wavfile.read('C:/Users/user/Documents/Audacity/210517_test (linear)(90)_normal_mic1.wav')

amount_of_samples = len(data)
length_of_sound = amount_of_samples / sample_rate
print("샘플링 레이트:",sample_rate)
print("총 샘플 수:",amount_of_samples)
print("파일 길이(Sec)",length_of_sound)
print("데이터 타입:",data.dtype)

scaled_data = data / 2.**15
time_array = np.arange(0,float(amount_of_samples),1)/sample_rate
plt.plot(time_array,scaled_data,linewidth = 0.3 , alpha = 0.7 , color ="#004bc6")
plt.xlabel("time(s)")
plt.ylabel("amplitude")
plt.show()

spectrum,freqs,t,im = plt.specgram(data,Fs=sample_rate,NFFT=1024,cmap=plt.get_cmap('autumn_r'))
cbar = plt.colorbar(im)
plt.xlabel('time(s)')
plt.ylabel('frequency(Hz)')
cbar.set_label("intensity(dB)")
plt.show()

index_of_frequency = np.where(freqs==250)[0][0]
data_for_frequency = spectrum[index_of_frequency]
data_in_db = 10 * np.log10(data_for_frequency)
plt.plot(t,data_in_db,linewidth =1,alpha=0.7,color='#004bc6')
plt.xlabel('time(s)')
plt.ylabel('power(dB)')
plt.show()



index_of_max = np.argmax(data_in_db)
value_of_max = data_in_db[index_of_max]
# plt.plot 추가
plt.plot(t[index_of_max],data_in_db[index_of_max],'go')

sliced_array = data_in_db[index_of_max:]
value_of_max_less_5 = value_of_max - 5

def find_nearest_value(array,value):
    array = np.asarray(array)
    idx = (np.abs(array-value)).argmin()
    return array[idx]

value_of_max_less_5 = find_nearest_value(sliced_array,value_of_max_less_5)
index_of_max_less_5 = np.where(data_in_db == value_of_max_less_5)
plt.plot(t[index_of_max_less_5],data_in_db[index_of_max_less_5],'yo')

value_of_max_less_25 = value_of_max - 25
value_of_max_less_25 = find_nearest_value(sliced_array,value_of_max_less_25)
index_of_max_less_25 = np.where(data_in_db == value_of_max_less_25)
plt.plot(t[index_of_max_less_5],data_in_db[index_of_max_less_25],'ro')
plt.plot(t,data_in_db,linewidth =1,alpha=0.7,color='#004bc6')
plt.show()



value_of_max_less_35 = value_of_max - 35
value_of_max_less_35 = find_nearest_value(sliced_array,value_of_max_less_35)
index_of_max_less_35 = np.where(data_in_db == value_of_max_less_35)[0][0]

x = t[index_of_max: index_of_max_less_35]
y = data_in_db[index_of_max: index_of_max_less_35]

slope,intercept,r_value,p_value,std_err = stats.linregress(x,y)
plt.plot(x, intercept + slope * x , 'r' , label = 'linear regression')
linregress = intercept + slope * x
plt.plot(t,data_in_db,linewidth =1,alpha=0.7,color='#004bc6')
plt.show()


rt20 = (t[index_of_max_less_5]-t[index_of_max_less_25])[0]
rt30 = (t[index_of_max_less_5]-t[index_of_max_less_35])[0]
rt60 = 3 * rt20
print("rt20;",round(abs(rt20),3))
print("rt30;",round(abs(rt30),3))
print("rt60;",round(abs(rt60),3))


"""
value_of_max_less_60 = value_of_max - 60
value_of_max_less_60 = find_nearest_value(sliced_array, value_of_max_less_60)
index_of_max_less_60 = np.where(data_in_db == value_of_max_less_60)[0][0]

x = t[index_of_max: index_of_max_less_60]
y = data_in_db[index_of_max: index_of_max_less_60]

slope,intercept,r_value,p_value,std_err = stats.linregress(x,y)
plt.plot(x, intercept + slope * x , 'r' , label = 'linear regression')
linregress = intercept + slope * x
plt.plot(t,data_in_db,linewidth =1,alpha=0.7,color='#004bc6')
plt.show()
"""

===================================================


import pandas as pd
import numpy as np
from scipy.io import wavfile
import librosa.display
import matplotlib.pyplot as plt
import math

# 음성 파일 로딩
file = 'C:/Users/user/Documents/Audacity/210512 test(mic1).wav'
# Signal , Sampling rate 설정
signal, sample_rate = librosa.load(file, sr=16000)

# signal벡터 갯수 분석
print("Signal Amplitude data:",signal)
print("Sample size:",signal.shape)

# Waveform 형태 분석
fig = plt.figure(figsize =(14,5))
librosa.display.waveplot(signal,sr=sample_rate)
plt.ylabel("Amplitude")
plt.xlabel("time(s)")
plt.show()

#출력한 waveform data 획득 및 저장
mic_signal_table = pd.DataFrame(data=signal)
print(mic_signal_table.shape)
mic_signal_table.to_csv('C:/Users/user/Documents/Audacity/saved_mic_wav_16Khz.csv')

"""
#출력한 Wavform data DB 획득 및 저장 ( dB = 20 * log10(amplitude / (1/sampling rate*2 ) ) (dB = 20 * log10(A/A0)) (ex 8 bit = -128 to 127)
signal_to_db = 20 * np.log10(signal)
mic_signal_to_db_table = pd.DataFrame(data=signal_to_db)
print(mic_signal_table.shape)
mic_signal_table.to_csv('C:/Users/user/Documents/Audacity/saved_mic_wav_16Khz_dB.csv')

"""

"""
# FFT 실행
# 샘플 hop 넘버 / 샘플 윈도우 수
hop_length = 512
n_fft = 2048

# duration 계산
hop_length_duration = float(hop_length)/sample_rate
n_fft_duration = float(n_fft)/sample_rate

# STFT 실행
stft = librosa.stft(signal,n_fft=n_fft,hop_length = hop_length)
print("stft shape:",stft.shape)

# Spectrogram 생성
spectrogram = np.abs(stft)
print("spectrogram shape:",spectrogram.shape)

# display spectrogram
plt.figure(figsize=(14,5))
librosa.display.specshow(spectrogram,sr=sample_rate,hop_length=hop_length)
plt.xlabel("Time(s)")
plt.ylabel("Frequency")
plt.colorbar()
plt.title("Spectorgram")
plt.show()

# calcurate Amplitude to Decibel (Using Spectrogram)
log_spectrogram = librosa.amplitude_to_db(spectrogram)
print("log spectrogram shpae",log_spectrogram.shape)
plt.figure(figsize=(14,5))
librosa.display.specshow(log_spectrogram,sr=sample_rate,hop_length=hop_length)
plt.xlabel("time(s)")
plt.ylabel("Frequency")
plt.colorbar(format = "%+2.0f dB")
plt.title("Spectrogram *dB")
plt.show()
"""
===================================================


회로설계
블록다이어그램 -> 회로도(스캐매틱) -> 아트웍 -> BOM -> 발주  
https://kernel.bz/blogPost/bombee_sch



대출규제
  대출규제 발표 

세계의 요리
https://namu.wiki/w/%ED%8B%80:%EC%84%B8%EA%B3%84%EC%9D%98%20%EC%9A%94%EB%A6%AC

사울왕조 다윗왕조 
https://namu.wiki/w/%EB%8B%A4%EC%9C%97

용과같이극7
https://konsoler.com/g2/bbs/board.php?bo_table=game_5_1&wr_id=31
